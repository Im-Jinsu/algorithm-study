# 백준 문제

- 어른 상어
    - https://www.acmicpc.net/problem/19237
    
### 문제 이해하기
맨 처음에는 모든 상어가 자신의 위치에 자신의 냄새를 뿌린다. 

그 후 1초마다 모든 상어가 동시에 상하좌우로 인접한 칸 중 하나로 이동하고, 자신의 냄새를 그 칸에 뿌린다. 냄새는 상어가 k번 이동하고 나면 사라진다.

각 상어가 이동 방향을 결정할 때는, 먼저 인접한 칸 중 아무 냄새가 없는 칸의 방향으로 잡는다. 그런 칸이 없으면 자신의 냄새가 있는 칸의 방향으로 잡는다. 

### 문제 접근 방법

큐에 상어가 움직일수 있는 위치를 넣어두고 나중에 상어를 한꺼번에 움직인다

### 구현 배경 지식

시뮬레이션

### 접근 방법을 적용한 코드
```java
import java.util.*;

public class Main {
	public static final int[] dr = { 0, -1, 1, 0, 0 };
	public static final int[] dc = { 0, 0, 0, -1, 1 };

	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int size = in.nextInt();
		int sharkNum = in.nextInt();
		int timeLimit = in.nextInt();

		Square mat[][] = new Square[size][size];
		Shark shark[] = new Shark[sharkNum + 1];

		for (int i = 0; i < size; i++) {
			for (int j = 0; j < size; j++) {
				int num = in.nextInt();
				mat[i][j] = new Square(num, 0);
				if (num != 0) {
					shark[num] = new Shark(num, i, j);
				}
			}
		}

		for (int i = 1; i <= sharkNum; i++) {
			int direction = in.nextInt();
			shark[i].setDirection(direction);
		}

		for (int i = 1; i <= sharkNum; i++) {
			int directionPrefer[][] = new int[5][5];
			for (int j = 1; j <= 4; j++) {
				for (int k = 1; k <= 4; k++) {
					directionPrefer[j][k] = in.nextInt();
				}
			}
			shark[i].setDirectionPrefer(directionPrefer);
		}

		int time = simulateShark(shark, mat, timeLimit);
		System.out.println(time - 1);

	}

	public static int simulateShark(Shark[] shark, Square[][] mat, int timeLimit) {
		int time = 1;
		while (time <= 1001) { // time이 1부터 시작인데 1000까지 했어서 틀렸었다...
			if (isFinish(shark)) {
				return time;
			}

			Queue<Shark> sharkList = new LinkedList<Shark>();
			for (int i = 1; i < shark.length; i++) {
				Shark sharkNow = shark[i];
				if (sharkNow == null) {
					continue;
				}
				int newRow = sharkNow.row;
				int newCol = sharkNow.col;
				boolean isMoved = false;
				for (int j = 1; j <= 4; j++) {
					int direction = sharkNow.directionPrefer[sharkNow.direction][j];
					if (isPossibleMoveBlank(mat, newRow + dr[direction], newCol + dc[direction], time, timeLimit)) {
						Shark sharkNext = new Shark(sharkNow.name, newRow + dr[direction], newCol + dc[direction]);
						sharkNext.direction = direction;
						sharkNext.directionPrefer = shark[i].directionPrefer;
						sharkList.add(sharkNext);
						isMoved = true;
						break;
					}
				}

				if (isMoved) {
					continue;
				}

				for (int j = 1; j <= 4; j++) {
					int direction = sharkNow.directionPrefer[sharkNow.direction][j];
					if (isPossibleMovePrevious(mat, newRow + dr[direction], newCol + dc[direction], i)) {
						Shark sharkNext = new Shark(sharkNow.name, newRow + dr[direction], newCol + dc[direction]);
						sharkNext.direction = direction;
						sharkNext.directionPrefer = shark[i].directionPrefer;
						sharkList.add(sharkNext);
						isMoved = true;
						break;
					}
				}
			}
			Shark[] nextShark = new Shark[shark.length];
			while (!sharkList.isEmpty()) {
				Shark sharkNow = sharkList.poll();
				if (nextShark[sharkNow.name] != null) {
					continue;
				}
				if (mat[sharkNow.row][sharkNow.col].shark == sharkNow.name
						|| time - mat[sharkNow.row][sharkNow.col].smellLimit > timeLimit
						|| mat[sharkNow.row][sharkNow.col].shark == 0) {
					nextShark[sharkNow.name] = sharkNow;
				}
			}

			for (int i = 1; i < nextShark.length; i++) {
				Shark sharkNow = nextShark[i];
				if (sharkNow == null) {
					continue;
				}
				if (mat[sharkNow.row][sharkNow.col].smellLimit == time) {
					nextShark[i] = null;
					continue;
				}
				mat[sharkNow.row][sharkNow.col] = new Square(sharkNow.name, time);
			}
			shark = nextShark;
			time++;

		}

		return 0;
	}

	public static void printSquare(Square[][] mat) {
		for (int i = 0; i < mat.length; i++) {
			for (int j = 0; j < mat.length; j++) {
				System.out.print(mat[i][j]);
			}
			System.out.println();
		}
		System.out.println("--------------------------");
	}

	public static boolean isFinish(Shark shark[]) {
		for (int i = 2; i < shark.length; i++) {
			if (shark[i] != null) {
				return false;
			}
		}
		return true;
	}

	public static boolean isPossibleMoveBlank(Square[][] mat, int row, int col, int time, int timeLimit) {
		if (!isPossibleBoundary(mat.length, row, col)) {
			return false;
		}
		if (mat[row][col].shark == 0) {
			return true;
		}
		if (time - mat[row][col].smellLimit > timeLimit) {
			return true;
		}
		return false;
	}

	public static boolean isPossibleMovePrevious(Square[][] mat, int row, int col, int sharkNum) {
		if (!isPossibleBoundary(mat.length, row, col)) {
			return false;
		}
		if (mat[row][col].shark == sharkNum) {
			return true;
		}
		return false;
	}

	public static boolean isPossibleBoundary(int size, int row, int col) {
		if (row < 0) {
			return false;
		}
		if (col < 0) {
			return false;
		}
		if (row >= size) {
			return false;
		}
		if (col >= size) {
			return false;
		}
		return true;
	}
}

class Shark {
	int name;
	int direction;
	int row;
	int col;
	int[][] directionPrefer;

	public Shark(int name, int row, int col) {
		this.name = name;
		this.row = row;
		this.col = col;
	}

	public void setDirection(int direction) {
		this.direction = direction;
	}

	public void setDirectionPrefer(int[][] directionPrefer) {
		this.directionPrefer = directionPrefer;
	}

	@Override
	public String toString() {
		return name + " (" + row + "," + col + ")";
	}
}

class Square {
	int shark;
	int smellLimit;

	public Square(int shark, int smellLimit) {
		this.shark = shark;
		this.smellLimit = smellLimit;
	}

	public Square(Square square) {
		this.shark = square.shark;
		this.smellLimit = square.smellLimit;
	}

	@Override
	public String toString() {
		return "(" + shark + "," + smellLimit + ")";
	}
}
```
